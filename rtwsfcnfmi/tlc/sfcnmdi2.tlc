%% 
%% TLC script to generate FMI 2.0 Model Description Interface
%% from a Simulink model during S-function code generation
%%
%%  Generated file:
%%           modelDescription.xml
%%

%% Starting generation of modelDescription.xml
%assign nbrVariables = 1
%openfile xmlfile = "modelDescription.xml"
%openfile inputfile = "inputs.tmp"
%openfile outputfile = "outputs.tmp"
%openfile paramfile = "params.tmp"
%openfile blockiofile = "blockio.tmp"
%openfile dworkfile = "dwork.tmp"
%openfile busiofile = "busio.tmp"
%openfile nullfile = "null.tmp"
%selectfile STDOUT
###
### Creating model variable description for FMI: modelDescription.xml
###
%selectfile xmlfile
<?xml version="1.0" encoding="UTF-8"?>
<fmiModelDescription
%with CompiledModel
  fmiVersion="2.0"
  modelName="%<OrigName>_sf"
  guid="%<GUID>" 
  description="S-function with FMI generated from Simulink model %<OrigName>"
  %with ConfigSet
  author="%<ModelAuthor>"
  %endwith
  version="%<ModelVersion>"
  generationTool="Dassault Systemes FMI Kit for Simulink, ver. 2.7 (MATLAB %<Version>)"
  %assign XMLdate = FEVAL("makeDateAndDoc", "%<OrigName>", %<ExportImage>, %<CopyModel>, %<LoadBinaryMEX>)
  generationDateAndTime="%<XMLdate>"
  %if BlockHierarchyNames
  variableNamingConvention="structured"
  %else
  variableNamingConvention="flat"
  %endif
  numberOfEventIndicators="%<ZCVectorlength>">
%if FMIType == "CoSimulation"
  <CoSimulation
    modelIdentifier="%<OrigName>_sf"
	canHandleVariableCommunicationStepSize="true"
    canInterpolateInputs="true"/>
%else
  <ModelExchange
    modelIdentifier="%<OrigName>_sf"/>
%endif
  <DefaultExperiment startTime="0.0"
  %if SolverType == "FixedStep"
    %if %<StopTime>!=rtInf
    stopTime="%<StopTime>"
    %endif
    %with FixedStepOpts 
    stepSize="%<FixedStep>"/>
    %endwith
  %else
    %if %<StopTime>==rtInf
    />
    %else
    stopTime="%<StopTime>"/>
    %endif
  %endif
  %if %<CopyModel> == 1
  %assign modelFileInfo = FEVAL("rtw_fileparts", FEVAL("which", "%<OrigName>"))
  <VendorAnnotations>
    <Tool
      name="CATIA_System_Synthesis">
      <model 
         path="resources\SimulinkModel\%<OrigName>%<modelFileInfo.Ext>"/>
    </Tool>
  </VendorAnnotations>
  %endif
  <ModelVariables>
  %% Inputs
  %assign inputsWithDirFeedthrough = []
  %assign nbrInputsScalar = 0
  %with ExternalInputs
  %if NumExternalInputs > 0
    %foreach portid = NumExternalInputs 
      %assign port = ExternalInput[portid]
      %assign nbrBusInPortVars = GenerateBusPortIO("2", "input", port, portid, nbrInputsScalar, 0, 0) 
      %if nbrBusInPortVars > 0
        %assign nbrInputsScalar = nbrInputsScalar + nbrBusInPortVars
        %if port.DirectFeedThrough == "yes"
          %foreach busindex = nbrBusInPortVars
            %assign inputsWithDirFeedthrough = inputsWithDirFeedthrough + (nbrVariables+busindex)
          %endforeach
        %endif
        %assign nbrVariables = nbrVariables + nbrBusInPortVars
        %selectfile busiofile
        %assign bustype = SLibGetRecordDataTypeName(port, "")
if ( isInput && portid==%<portid>) return allocateMemory0(1, sizeof(%<bustype>));
      %else
        %with port
          %assign typeName = SLibGetRecordDataTypeName(port, "")
          %assign fmiType = GetFMIType(typeName)
          %if fmiType != ""
            %assign width = LibGetRecordWidth(port)
            %foreach idx = width
              %selectfile xmlfile
    <!-- Index for next variable = %<nbrVariables> -->
              %assign nbrVariables = nbrVariables + 1
    <ScalarVariable
              %if width==1
      name="%<Identifier>"
              %else
      name="%<Identifier>[%<idx+1>]"
              %endif
              %assign valref = FEVAL("makeValueRef", "Input", typeName, nbrInputsScalar)
      valueReference="%<valref>"
              %if (fmiType == "fmiBoolean") || (fmiType == "fmiInteger")
      causality="input"
      variability="discrete">
              %else
      causality="input">
              %endif
              %if fmiType == "fmiBoolean"
      <Boolean
        start="false"/>
              %elseif fmiType == "fmiInteger"
                %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
                %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
                %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
                %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
                %if maxValue == "4294967295"
                 %assign maxValue = "2147483647"
                %endif
      <Integer min="%<minValue>"
        max="%<maxValue>"
        start="0"/>
              %else
      <Real
        start="0.0"/>
              %endif
    </ScalarVariable>
              %selectfile inputfile
    inputs[%<nbrInputsScalar>] = (((%<typeName> **) ssGetInputPortSignalPtrs(S, %<portid>))[%<idx>]);
              %assign nbrInputsScalar = nbrInputsScalar + 1
              %if DirectFeedThrough == "yes"
                %assign inputsWithDirFeedthrough = inputsWithDirFeedthrough + nbrInputsScalar
              %endif
            %endforeach
          %endif
        %endwith
      %endif
    %endforeach
  %endif
  %endwith
  %% Outputs
  %assign nbrOutputsScalar = 0
  %with ExternalOutputs
    %if NumExternalOutputs > 0
      %foreach portid = NumExternalOutputs
	    %assign outp  = ExternalOutput[portid]
	    %assign sysid = outp.Block[0]
	    %assign blkid = outp.Block[1]
	    %assign outportBlock = System[sysid].Block[blkid]
        %assign nbrBusOutPortVars = GenerateBusPortIO("2", "output", outportBlock, portid, nbrOutputsScalar, nbrInputsScalar, 0) 
        %if nbrBusOutPortVars > 0
          %assign nbrOutputsScalar = nbrOutputsScalar + nbrBusOutPortVars
          %assign nbrVariables = nbrVariables + nbrBusOutPortVars
          %selectfile busiofile
          %assign bustype = SLibGetRecordDataTypeName(outportBlock.DataInputPort, "")
if (!isInput && portid==%<portid>) return allocateMemory0(width, sizeof(%<bustype>));
        %else
	      %with outportBlock
            %assign typeName = SLibGetRecordDataTypeName(outp, "")
            %assign fmiType = GetFMIType(typeName)
            %if fmiType != ""
	          %assign width    = LibBlockInputSignalWidth(0)
              %foreach idx = width
                %selectfile xmlfile
    <!-- Index for next variable = %<nbrVariables> -->
                %assign nbrVariables = nbrVariables + 1
    <ScalarVariable
                %if width==1
      name="%<Identifier>"
                %else
      name="%<Identifier>[%<idx+1>]"
                %endif
                %assign valref = FEVAL("makeValueRef", "Output", typeName, nbrOutputsScalar)
      valueReference="%<valref>"
                %if (fmiType == "fmiBoolean") || (fmiType == "fmiInteger")
      causality="output"
      variability="discrete">
                %else
      causality="output">
                %endif
                %if fmiType == "fmiBoolean"
      <Boolean/>
                %elseif fmiType == "fmiInteger"
                  %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
                  %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
                  %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
                  %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
                  %if maxValue == "4294967295"
                   %assign maxValue = "2147483647"
                  %endif
      <Integer min="%<minValue>"
        max="%<maxValue>"/>
                %else
      <Real/>
                %endif
    </ScalarVariable>
                %selectfile outputfile
    outputs[%<nbrOutputsScalar>] = &(((%<typeName> *) ssGetOutputPortSignal(S, %<portid>))[%<idx>]);
                %assign nbrOutputsScalar = nbrOutputsScalar + 1
              %endforeach
            %endif
          %endwith
        %endif
      %endforeach
    %endif
  %endwith
  %selectfile xmlfile
  %% Continuous-time states and their derivatives
  %assign ::stateDerivativeVars = FEVAL("zeros", 1, ::CompiledModel.NumContStates+1)
  %assign nbrStatesScalar = GenerateSubsystemFMI("2", "State", 0, 0, (nbrInputsScalar+nbrOutputsScalar), BlockHierarchyNames, BlackBoxFMU)
  %% DWork variables (discrete states and modes)
  %if %<IncludeDWork> == 1 && %<BlackBoxFMU> != 1
    %assign nbrDWorkScalar = GenerateSubsystemFMI("2", "DWork", 0, 0, (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar), BlockHierarchyNames, 0) 
  %else
    %assign nbrDWorkScalar = 0
  %endif
  %% Parameters  
  %with ConfigSet
    %assign inline = %<InlineParams>
  %endwith
  %if (%<BlackBoxFMU> != 1)
    %if (inline != 1)
	  %assign isRelBeforeR2015b = FEVAL("verLessThan", "matlab", "8.6")
      %if ( isRelBeforeR2015b == 0 )
        %assign nbrWorkspaceParams = GenerateGlobalTunablePars("2", "Parameter", (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar+nbrDWorkScalar), BlockHierarchyNames)
        %assign nbrBlockParams = GenerateSubsystemFMI("2", "Parameter", 0, nbrWorkspaceParams, (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar+nbrDWorkScalar), BlockHierarchyNames, 0)
        %assign nbrParamsScalar = nbrWorkspaceParams + nbrBlockParams
      %else
        %assign nbrParamsScalar = GenerateSubsystemFMI("2", "Parameter", 0, 0, (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar+nbrDWorkScalar), BlockHierarchyNames, 0) 
      %endif
    %else
      %assign nbrParamsScalar = GenerateGlobalTunablePars("2", "Parameter", (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar+nbrDWorkScalar), BlockHierarchyNames) 
    %endif
  %else
    %assign nbrParamsScalar = 0
  %endif
  %if nbrParamsScalar > 0
    %selectfile paramfile
}
    %selectfile xmlfile
  %endif
  %% Block output variables   
  %if %<IncludeBlockOutputs> == 1 && %<BlackBoxFMU> != 1
    %assign nbrBlockIOScalar = GenerateSubsystemFMI("2", "BlockOutput", 0, 0, (nbrInputsScalar+nbrOutputsScalar+2*nbrStatesScalar+nbrDWorkScalar+nbrParamsScalar), BlockHierarchyNames, 0)
  %else
    %assign nbrBlockIOScalar = 0
  %endif
  %selectfile xmlfile
  </ModelVariables>
  <ModelStructure>
  %assign outputsDependAll = 0
  %assign depStr = ""
  %assign depKindStr1 = ""
  %assign depKindStr2 = ""
  %assign sep = ""
  %if nbrOutputsScalar > 0
    %if SIZE(inputsWithDirFeedthrough,1) < nbrInputsScalar
      %% Outputs depend on subset of inputs
      %foreach dirid = SIZE(inputsWithDirFeedthrough,1)
        %assign depStr = depStr + sep + "%<inputsWithDirFeedthrough[dirid]>"
        %assign depKindStr1 = depKindStr1 + sep + "fixed"
        %assign depKindStr2 = depKindStr2 + sep + "dependent"
        %assign sep = " "
      %endforeach
      %% Add state dependencies
      %foreach stateid = nbrStatesScalar
        %assign depStr = depStr + sep + "%<2*(stateid+1)-1 + nbrInputsScalar + nbrOutputsScalar>"
        %assign depKindStr1 = depKindStr1 + sep + "fixed"
        %assign depKindStr2 = depKindStr2 + sep + "dependent"
        %assign sep = " "
      %endforeach
    %elseif nbrInputsScalar > 0
      %% All outputs depend on all inputs
      %assign outputsDependAll = 1
    %else
      %% No inputs in model
      %if nbrStatesScalar > 0
        %assign outputsDependAll = 1
      %endif
    %endif
    <Outputs>
      %foreach outpid = nbrOutputsScalar
        %assign uindex = outpid + 1 + nbrInputsScalar
        %if outputsDependAll
      <Unknown index="%<uindex>"/>
        %else
      <Unknown index="%<uindex>"
        dependencies="%<depStr>"
        dependenciesKind="%<depKindStr1>"/>
        %endif
      %endforeach
    </Outputs>
  %endif
  %if nbrStatesScalar > 0
    <Derivatives>
    %% Currently indicate that all derivatives depend on all inputs and states
	%foreach derid = nbrStatesScalar
      %assign uindex = ::stateDerivativeVars[derid]
      <Unknown index="%<uindex>"/>
    %endforeach
    </Derivatives>
  %endif
  %if (nbrOutputsScalar + nbrStatesScalar) > 0
    <InitialUnknowns>
    %foreach outpid = nbrOutputsScalar
      %assign uindex = outpid + 1 + nbrInputsScalar
      %if outputsDependAll
      <Unknown index="%<uindex>"/>
      %else
      <Unknown index="%<uindex>"
        dependencies="%<depStr>"
        dependenciesKind="%<depKindStr2>"/>
      %endif
    %endforeach
    %foreach derid = nbrStatesScalar
      %assign uindex = ::stateDerivativeVars[derid]
      <Unknown index="%<uindex>"/>
    %endforeach
    </InitialUnknowns>
  %endif
  </ModelStructure>
</fmiModelDescription>
%endwith
%closefile xmlfile
%closefile inputfile
%closefile outputfile
%closefile paramfile
%closefile blockiofile
%closefile dworkfile
%closefile busiofile
%closefile nullfile

