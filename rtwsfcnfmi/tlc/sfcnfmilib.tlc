%% 
%%  TLC library with utility functions for the FMU 
%%  model description (XML) generation.
%%

%function GetFMIType(typeName) void
  %assign isReal    = (typeName == "real_T" || typeName == "real32_T") ? 1 : 0
  %assign isBoolean = (typeName == "boolean_T") ? 1 : 0
  %assign isInteger = (typeName == "uint8_T" || typeName == "int8_T" || typeName == "uint16_T" || typeName == "int16_T" || typeName == "uint32_T" || typeName == "int32_T") ? 1 : 0
  %if isReal
    %return "fmiReal"
  %elseif isBoolean
    %return "fmiBoolean"
  %elseif isInteger
    %return "fmiInteger"
  %else
    %return ""
  %endif
%endfunction

%function GetMxClass(typeName) void
  %if (typeName == "real_T")
    %return "mxDOUBLE_CLASS"
  %elseif (typeName == "real32_T")
    %return "mxSINGLE_CLASS"
  %elseif (typeName == "boolean_T") || (typeName == "uint8_T")
    %return "mxUINT8_CLASS"
  %elseif (typeName == "int8_T")
    %return "mxINT8_CLASS"
  %elseif (typeName == "uint16_T")
    %return "mxUINT16_CLASS"
  %elseif (typeName == "int16_T")
    %return "mxINT16_CLASS"
  %elseif (typeName == "uint32_T")
    %return "mxUINT32_CLASS"
  %elseif (typeName == "int32_T")
    %return "mxINT32_CLASS"
  %else
    %return ""
  %endif
%endfunction

%function OutputNonStructIOElement(fmiVer, IOtype, busPort, portid, eIdx, identifier, width, startIndex, varOffset, feedThrough1) Output
  %assign typeName = ::CompiledModel.DataTypes.DataType[eIdx].Name
  %assign fmiType = GetFMIType(typeName)
  %foreach idx = width
    %selectfile xmlfile
    %if fmiVer == "2"
      %assign varIndex = varOffset + startIndex + idx + 1
    <!-- Index for next variable = %<varIndex> -->
    %endif
    <ScalarVariable
    %if width==1
      name="%<busPort.Identifier>.%<identifier>"
    %else
      name="%<busPort.Identifier>.%<identifier>[%<idx+1>]"
    %endif
    %assign valref = FEVAL("makeValueRef", IOtype, typeName, startIndex+idx)
      valueReference="%<valref>"
    %if (fmiType == "fmiBoolean") || (fmiType == "fmiInteger")
      %if fmiVer == "1"
      variability="discrete"
      %else
      causality="%<IOtype>"
      variability="discrete">
      %endif
    %else
      %if fmiVer == "2"
      causality="%<IOtype>">
      %endif
    %endif
    %if fmiVer == "1"
      causality="%<IOtype>">
    %endif
    %if fmiType == "fmiBoolean"
      %if IOtype == "input"
      <Boolean
        start="false"/>
      %else
      <Boolean/>
      %endif
    %elseif fmiType == "fmiInteger"
      %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
      %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
      %if maxValue == "4294967295"
       %assign maxValue = "2147483647"
      %endif
      %if IOtype == "input"
      <Integer min="%<minValue>"
        max="%<maxValue>"
        start="0"/>
      %else
      <Integer min="%<minValue>"
        max="%<maxValue>"/>
      %endif
    %else
      %if IOtype == "input"
      <Real
        start="0.0"/>
      %else
      <Real/>
      %endif
    %endif
    %if IOtype == "output" && fmiVer == "1"
      %if feedThrough1 == 0
      <DirectDependency/>
      %elseif feedThrough1 == 1
      <DirectDependency>
          %include "%<buildDir>/dirfeedthrough.tmp"
      </DirectDependency>
      %endif
    %endif
    </ScalarVariable>
    %if IOtype == "input"
      %if fmiVer == "1"
        %if busPort.DirectFeedThrough == "yes"
          %selectfile dirfile
          %if width==1
        <Name>%<busPort.Identifier>.%<identifier></Name>
          %else
        <Name>%<busPort.Identifier>.%<identifier>[%<idx>]</Name>
          %endif
        %endif
      %endif
      %assign porttype = SLibGetRecordDataTypeName(busPort, "")
      %selectfile inputfile
      %if width==1
    inputs[%<startIndex+idx>] = &((*(%<porttype> **) ssGetInputPortSignalPtrs(S, %<portid>))->%<identifier>);
      %else
    inputs[%<startIndex+idx>] = &((*(%<porttype> **) ssGetInputPortSignalPtrs(S, %<portid>))->%<identifier>[%<idx>]);
      %endif
    %else
      %assign porttype = SLibGetRecordDataTypeName(busPort.DataInputPort, "")
      %selectfile outputfile
      %if width==1
    outputs[%<startIndex+idx>] = &(((%<porttype> *) ssGetOutputPortSignal(S, %<portid>))->%<identifier>);
      %else
    outputs[%<startIndex+idx>] = &(((%<porttype> *) ssGetOutputPortSignal(S, %<portid>))->%<identifier>[%<idx>]);
      %endif
    %endif
  %endforeach
%endfunction

%function GenerateBusPortIOElement(fmiVer, IOtype, busPort, portid, dtIdx, eIdx, identifier, sep, startIndex, varOffset, feedThrough1) void
  %assign element = ::CompiledModel.DataTypes.DataType[dtIdx].Elements[eIdx]
  
  %assign eDtId = LibDataTypeElementDataTypeId(dtIdx, eIdx)
  %assign eDt = ::CompiledModel.DataTypes.DataType[eDtId]
  %assign eWidth = LibDataTypeElementWidth(dtIdx, eIdx)

  %assign numElementVariables = 0
  %if LibIsStructDataType(eDtId)
    %foreach mIdx = eWidth
      %foreach eDteIdx = eDt.NumElements
	    %if eWidth == 1
          %assign numSubElementVariables = GenerateBusPortIOElement(fmiVer, IOtype, busPort, portid, eDtId, eDteIdx, identifier + sep + element.Name, ".", startIndex+numElementVariables, varOffset, feedThrough1)
        %else
		  %assign numSubElementVariables = GenerateBusPortIOElement(fmiVer, IOtype, busPort, portid, eDtId, eDteIdx, identifier + sep + element.Name + "[%<mIdx>]", ".", startIndex+numElementVariables, varOffset, feedThrough1)
        %endif
        %assign numElementVariables = numElementVariables + numSubElementVariables
      %endforeach
	%endforeach
    %return numElementVariables
  %else  
    %<OutputNonStructIOElement(fmiVer, IOtype, busPort, portid, eDtId, identifier + sep + element.Name, eWidth, startIndex, varOffset, feedThrough1)>
    %return eWidth
  %endif
%endfunction

%function GenerateBusPortIO(fmiVer, IOtype, port, portid, startIndex, varOffset, feedThrough1) void
  %if IOtype == "input"
    %assign pCGTIdx = port.CGTypeIdx
  %else
    %assign pCGTIdx = port.DataInputPort.CGTypeIdx
  %endif
  %assign pCGType = ::CompiledModel.CGTypes.CGType[pCGTIdx]
  %if pCGType.SLTypeIdx > 0
    %if ( ::CompiledModel.DataTypes.DataType[pCGType.SLTypeIdx].IsBus )
      %assign numBusVariables = 0
      %assign pSLType = ::CompiledModel.DataTypes.DataType[pCGType.SLTypeIdx]
      %foreach eIdx = pSLType.NumElements
        %assign numMemberVariables = GenerateBusPortIOElement(fmiVer, IOtype, port, portid, pCGType.SLTypeIdx, eIdx, "", "", startIndex+numBusVariables, varOffset, feedThrough1)
        %assign numBusVariables = numBusVariables + numMemberVariables
      %endforeach
	  %return numBusVariables
    %endif
  %endif
  %return 0
%endfunction

%function IsNoninlinedCMEXSfunction(sfcnname) void
  %with ::CompiledModel
    %foreach sysid = NumSystems
      %assign sys = System[sysid]
      %with sys
        %foreach blockid = NumBlocks
          %assign block = Block[blockid]
          %with block
            %if Type == "S-Function" && ParamSettings.FunctionType == "C-MEX" && ParamSettings.Inlined == "no" && ParamSettings.FunctionName == sfcnname
              %return TLC_TRUE
            %endif
          %endwith
        %endforeach
      %endwith
    %endforeach
  %endwith
  %return TLC_FALSE
%endfunction

%function OutputSFcnParameterCode(codegen) Output
%if !codegen
  const mxArray *param;
  int_T i;
  real_T *vals;
%endif
  %assign numChildSFcns = 0
  %with ::CompiledModel
    %foreach sysid = NumSystems
      %assign sys = System[sysid]
      %with sys
        %foreach blockid = NumBlocks
          %assign block = Block[blockid]
          %with block
            %if Type == "S-Function" && ParamSettings.FunctionType == "C-MEX" && ParamSettings.Inlined == "no"
              %assign numChildSFcns = numChildSFcns + 1
              %assign numArgs = Parameters[0] / 2
              %if numArgs > 0
                %foreach argIdx = numArgs
                  %assign paramIdx  = argIdx + 1
                  %if codegen
                    %assign paramName = "P%<paramIdx>Size"
                    %assign paramAddr = LibBlockParameterAddr(%<paramName>,"","",0)
  _ssSetSFcnParam(ssGetSFunction(S, %<numChildSFcns-1>), %<argIdx>, (mxArray*)(%<paramAddr>));
                  %else
                    %assign paramVal = "P%<paramIdx>"
                    %assign mSize = CAST("Number", Parameter[argIdx*2].Value[0])
	                %assign nSize = CAST("Number", Parameter[argIdx*2].Value[1])
                    %assign data = ...
	                        LibBlockMatrixParameterAddr(%<paramVal>, "", "", ...
	                        0, "", "", 0)
  param = ssGetSFcnParam(ssGetSFunction(S, %<numChildSFcns-1>), %<argIdx>);
                    %if mSize*nSize > 0
  vals = (real_T *) %<data>;
  for (i=0;i< %<mSize> * %<nSize>;i++) {
    mxGetPr(param)[i] = vals[i];
  }
                    %endif
                  %endif
                %endforeach
              %endif
            %endif
          %endwith
        %endforeach
      %endwith
    %endforeach
  %endwith
%endfunction

%function OutputStateFMI(fmiVer, state, startIndex, varOffset, hierarchy, blackbox, idx, isSf) Output
  %assign width = LibGetRecordWidth(state)
  %assign varGroup = ::CompiledModel.VarGroups.VarGroup[state.VarGroupIdx[0]]
  %if varGroup.ParentVarGroupIdx == -1
    %assign identifier = state.Identifier
  %else
    %assign identifier = varGroup.Name + "." + state.Identifier
  %endif
  %with state
    %foreach vecid = width
      %selectfile xmlfile
      %if width == 1
        %assign indexext = ""
      %else
        %assign indexext = "[%<vecid+1>]"
      %endif
      %if hierarchy
        %assign blockStateId = ""
        %if idx > 0
          %assign blockStateId = "_" + "%<idx>"
        %endif
        %if (ISFIELD(state, "GrSrc")) && (state.GrSrc[1] != -1)
          %if isSf
            %assign sep = "_"
          %else
            %assign sep = "."
          %endif
          %assign varPath = LibGetFormattedBlockPath(SLibGrBlock(state.GrSrc))
          %assign nameId = "ContStates." + FEVAL("makeBlockPath", varPath) + sep + "CSTATE" + blockStateId
        %else
          %assign nameId = "ContStates." + identifier
        %endif
      %else
        %assign nameId = identifier + "_xc"
      %endif
      %assign valref = FEVAL("makeValueRef", "State", "real_T", state.StartIndex+vecid)
      %if fmiVer == "2"
        %assign varIndex = varOffset + 2*(startIndex + vecid) + 1
    <!-- Index for next variable = %<varIndex> -->
      %endif
    <ScalarVariable
      %if blackbox && (fmiVer == "2")
      name="concealed%<(varIndex - varOffset)>"
      %else
      name="%<nameId>%<indexext>"
      %endif
      %if (fmiVer == "1")
      valueReference="%<valref>">
      <Real/>
      %else
      valueReference="%<valref>"
      initial="calculated">
      <Real reinit="true"/>
      %endif
    </ScalarVariable>
      %if fmiVer == "2"
    <!-- Index for next variable = %<varIndex+1> -->
	    %assign ::stateDerivativeVars[state.StartIndex+vecid] = varIndex+1
      %endif
    <ScalarVariable
      %if blackbox && (fmiVer == "2")
      name="concealed%<(varIndex - varOffset)+1>"
      %else
      name="der(%<nameId>%<indexext>)"
      %endif
      %assign valref = FEVAL("makeValueRef", "Derivative", "real_T", state.StartIndex+vecid)
      valueReference="%<valref>">      
      %if (fmiVer == "1")
      <Real/>
      %else
      <Real derivative="%<varIndex>"/>
      %endif
    </ScalarVariable>
    %endforeach
    %selectfile nullfile
  %endwith
%endfunction

%function OutputParameterFMI(fmiVer, param, startIndex, varOffset, hierarchy, isSf, isGlobal) Output
  %assign parType = ::CompiledModel.GlobalScope.tParametersType
  %assign defParam = ::CompiledModel.GlobalScope.tDefaultParameters
  %assign typeName = SLibGetRecordDataTypeName(param, "")
  %assign fmiType = GetFMIType(typeName)
  %assign width = LibGetRecordWidth(param)
  %assign dims = LibGetRecordDimensions(param)
  %assign nRows = dims[0]
  %assign nCols = (SIZE(dims, 1) == 1) ? 1 : dims[1]
  %assign extraDims = 1
  %if SIZE(dims, 1) > 2
    %foreach dimsIdx = SIZE(dims, 1)-2
      %assign extraDims = extraDims*dims[dimsIdx+2]
    %endforeach
  %endif
  %with param
    %assign count = -1
	%foreach dimid = extraDims
    %foreach colid = nCols
    %foreach rowid = nRows
      %assign count = count + 1
      %if width == 1
        %assign indexext = ""
		%assign indexext2 = ""
      %else
        %assign indexext = "[%<count+1>]"
		%assign indexext2 = "[%<count>]"
      %endif
      %assign sigSrc = param.OwnerSysIdx
      %if sigSrc[1] < 0
        %assign identifier = Identifier
      %else
        %assign varGroupIdx = FcnSysVarGroupIndex(::CompiledModel.System[sigSrc[0]], "Parameter",  sigSrc[1]) 
        %assign identifier = ::CompiledModel.VarGroups.VarGroup[varGroupIdx].Name + "." + Identifier
      %endif
      %if hierarchy
        %if ((SIZE(param.ReferencedBy, 0) == 1) && (SIZE(param.GraphicalRef, 0) == 1)) && !isGlobal
          %assign sysIdx = param.ReferencedBy[0][0]
          %assign blkIdx = param.ReferencedBy[0][2]
          %assign prmIdx = param.ReferencedBy[0][3]
          %assign block  = System[sysIdx].Block[blkIdx]
          %if block.Type != "SubSystem"
            %assign varPath = LibGetFormattedBlockPath(SLibGrBlock(param.GraphicalRef[0]))
            %assign blkPrm = block.Parameter[prmIdx]
            %if !isSf
              %assign nameId = "Parameters." + FEVAL("makeBlockPath", varPath) + "." + blkPrm.Name
            %else
              %assign nameId = "Parameters." + FEVAL("makeBlockPath", varPath) + "_" + blkPrm.Name
            %endif
          %else
            %assign nameId = "Parameters." + identifier
          %endif
        %else
          %assign nameId = "Parameters." + identifier
        %endif
      %else
        %assign nameId = identifier + "_pm"
      %endif
      %assign valref = FEVAL("makeValueRef", "Parameter", typeName, startIndex+count)
      %assign prmClass = TYPE(Value)
      %if prmClass == "Matrix"
        %assign pValue = Value[rowid][colid]
      %elseif prmClass == "Vector"
        %assign pValue = Value[count]
      %else
        %assign pValue = Value
      %endif
      %selectfile xmlfile
      %if fmiVer == "2"
        %assign varIndex = varOffset + startIndex + count + 1
    <!-- Index for next variable = %<varIndex> -->
      %endif
    <ScalarVariable
      name="%<nameId>%<indexext>"
      valueReference="%<valref>"
      %if fmiVer == "1"
      variability="parameter">
      %else
      causality="parameter"
      variability="tunable">
      %endif
        %if fmiType == "fmiBoolean"
      <Boolean
          %if %<pValue>==0
            %if fmiVer == "1"
        start="false"
            %else
        start="false"/> 
            %endif
          %else
            %if fmiVer == "1"
        start="true"
            %else
        start="true"/>
            %endif
          %endif
          %if fmiVer == "1"
        fixed="true"/>
          %endif
        %elseif fmiType == "fmiInteger"
          %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
          %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
          %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
          %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
          %if maxValue == "4294967295"
           %assign maxValue = "2147483647"
          %endif
      <Integer min="%<minValue>"
        max="%<maxValue>"
          %assign pIntegerValue = FEVAL("strrep", "%<pValue>", "U", "")
          %if fmiVer == "1"
        start="%<pIntegerValue>"
        fixed="true"/>
          %else
        start="%<pIntegerValue>"/>
          %endif
        %else
      <Real
	      %if %<pValue>==rtInf
		    %if typeName == "real_T"
              %assign pValue = "1.0E+300"
			%else
			  %assign pValue = "3.4E+38"
			%endif
          %elseif %<pValue>==rtMinusInf
		    %if typeName == "real_T"
              %assign pValue = "-1.0E+300"
			%else
			  %assign pValue = "-3.4E+38"
			%endif
		  %elseif %<pValue>==rtNaN
		    %assign pValue = "0.0"
		  %endif
          %assign pRealValue = FEVAL("strrep", "%<pValue>", "F", "")
          %if fmiVer == "1"
        start="%<pRealValue>"
        fixed="true"/>
          %else
        start="%<pRealValue>"/>
          %endif
        %endif
    </ScalarVariable>
      %selectfile paramfile
      %assign nbrParamsInCurrentFunction = FEVAL("mod", startIndex+count, 500)
      %assign paramFunctionCount         = CAST("Number", FEVAL("floor", (startIndex+count)/500))
      %if nbrParamsInCurrentFunction == 0
        %if paramFunctionCount > 0
}
        %endif
static void sfcn_fmi_paramFunc%<paramFunctionCount>_(%<parType>* p, void** parameters)
{
      %endif
    parameters[%<startIndex+count>] = &(p->%<identifier>%<indexext2>);
    %endforeach
    %endforeach
	%endforeach
  %endwith
%endfunction

%function OutputBlockoutputFMI(fmiVer, blockoutp, startIndex, varOffset, hierarchy, isSf) Output
  %assign blockIO = ::CompiledModel.GlobalScope.tBlockIOType
  %assign width = LibGetRecordWidth(blockoutp)
  %assign varGroup = ::CompiledModel.VarGroups.VarGroup[blockoutp.VarGroupIdx[0]]
  %if varGroup.ParentVarGroupIdx == -1
    %assign identifier = LibGetRecordIdentifier(blockoutp)
  %else
    %assign identifier = varGroup.Name + "." + LibGetRecordIdentifier(blockoutp)
  %endif
  %assign typeName = SLibGetRecordDataTypeName(blockoutp, "")
  %assign fmiType = GetFMIType(typeName)
  %foreach vecid = width
    %if width == 1
      %assign indexext = ""
	  %assign indexext2 = ""
    %else
      %assign indexext = "[%<vecid+1>]"
	  %assign indexext2 = "[%<vecid>]"
    %endif
    %if hierarchy
      %if (ISFIELD(blockoutp, "GrSrc") && blockoutp.GrSrc[1] != -1)
        %assign varPath = LibGetFormattedBlockPath(SLibGrBlock(blockoutp.GrSrc))
        %if isSf
          %assign ext = "_BlkIO"
        %else
          %assign ext = ""
        %endif
        %if (SIZE(blockoutp.GrSrc,1) > 2) && (blockoutp.GrSrc[2] > 0)
          %assign nameId = "BlockOutputs." + FEVAL("makeBlockPath", varPath) + ext + "_%<blockoutp.GrSrc[2]>"
        %else
          %assign nameId = "BlockOutputs." + FEVAL("makeBlockPath", varPath) + ext
        %endif
      %else
        %assign nameId = "BlockOutputs." + identifier
      %endif
    %else
      %assign nameId = identifier + "_wb"
    %endif
    %assign valref = FEVAL("makeValueRef", "BlockIO", typeName, startIndex+vecid)
    %selectfile xmlfile
    %if fmiVer == "2"
      %assign varIndex = varOffset + startIndex + vecid + 1
    <!-- Index for next variable = %<varIndex> -->
    %endif
    <ScalarVariable
      name="%<nameId>%<indexext>"
    %if fmiType == "fmiBoolean"
      valueReference="%<valref>"
      variability="discrete">
      <Boolean/>
    %elseif fmiType == "fmiInteger"
      valueReference="%<valref>"
      variability="discrete">
      %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
      %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
      %if maxValue == "4294967295"
       %assign maxValue = "2147483647"
      %endif
      <Integer min="%<minValue>"
        max="%<maxValue>"/>
    %else
      valueReference="%<valref>">
      <Real/>
    %endif
    </ScalarVariable>
    %selectfile blockiofile
    blockoutputs[%<startIndex+vecid>] = &(((%<blockIO> *) ssGetLocalBlockIO(S))->%<identifier>%<indexext2>);
  %endforeach
%endfunction

%function OutputDWorkFMI(fmiVer, dwork, startIndex, varOffset, hierarchy, blockidx, dworkidx, isSf) Output
  %assign width = LibGetRecordWidth(dwork)
  %assign varGroup = ::CompiledModel.VarGroups.VarGroup[dwork.VarGroupIdx[0]]
  %if varGroup.ParentVarGroupIdx == -1
    %assign identifier = LibGetRecordIdentifier(dwork)
  %else
    %assign identifier = varGroup.Name + "." + LibGetRecordIdentifier(dwork)
  %endif
  %assign typeName = SLibGetRecordDataTypeName(dwork, "")
  %assign fmiType = GetFMIType(typeName)
  %foreach vecid = width
    %if width == 1
      %assign indexext = ""
    %else
      %assign indexext = "[%<vecid+1>]"
    %endif
    %if hierarchy 
      %assign blockDWorkId = ""
      %if blockidx > 0
        %assign blockDWorkId = "_" + "%<blockidx>"
      %endif
      %if(ISFIELD(dwork, "GrSrc") && dwork.GrSrc[1] != -1)
        %if isSf
          %assign sep = "_"
        %else
          %assign sep = "."
        %endif
        %assign varPath = LibGetFormattedBlockPath(SLibGrBlock(dwork.GrSrc))
        %if (SIZE(dwork.GrSrc,1) > 2) && (dwork.GrSrc[2] > 0)
          %assign nameId = "DiscStates." + FEVAL("makeBlockPath", varPath) + sep + dwork.Name + blockDWorkId + "_%<dwork.GrSrc[2]>"
        %else
          %assign nameId = "DiscStates." + FEVAL("makeBlockPath", varPath) + sep + dwork.Name + blockDWorkId
        %endif
      %else
        %assign nameId = "DiscStates." + identifier
      %endif
    %else
      %assign nameId = identifier + "_xd"
    %endif
    %assign valref = FEVAL("makeValueRef", "DWork", typeName, startIndex+vecid)
    %selectfile xmlfile
    %if fmiVer == "2"
      %assign varIndex = varOffset + startIndex + vecid + 1
    <!-- Index for next variable = %<varIndex> -->
    %endif
    <ScalarVariable
      name="%<nameId>%<indexext>"
    %if fmiType == "fmiBoolean"
      valueReference="%<valref>"
      variability="discrete">
      <Boolean/>
    %elseif fmiType == "fmiInteger"
      valueReference="%<valref>"
      variability="discrete">
      %assign minValue = FEVAL("intmin", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign maxValue = FEVAL("intmax", FEVAL("strrep", "%<typeName>", "_T", ""))
      %assign minValue = FEVAL("strrep", "%<minValue>", "U", "")
      %assign maxValue = FEVAL("strrep", "%<maxValue>", "U", "")
      %if maxValue == "4294967295"
       %assign maxValue = "2147483647"
      %endif
      <Integer min="%<minValue>"
        max="%<maxValue>"/>
    %else
      valueReference="%<valref>">
      <Real/>
    %endif
    </ScalarVariable>
    %selectfile dworkfile
    dwork[%<startIndex+vecid>] = &(((%<typeName> *)(ssGetDWork(S, %<dworkidx>)))[%<vecid>]);
  %endforeach
%endfunction

%function GenerateBlockFMI(fmiVer, fmiCategory, block, subSysIdx, blockIdx, startIndex, varOffset, hierarchy, blackbox) void
  %assign numBlkVars = 0
  %assign isSf = (block.Type == "Stateflow") || (block.Type == "SubSystem")
  %switch(fmiCategory)
    %case "State"
      %foreach idx = block.NumContStates
	    %if block.ContState[idx]._idx >= 0
          %assign state = ::CompiledModel.ContStates.ContState[block.ContState[idx]._idx]
%<OutputStateFMI(fmiVer, state, startIndex+numBlkVars, varOffset, hierarchy, blackbox, idx, isSf)>
          %assign numBlkVars = numBlkVars + LibGetRecordWidth(state)
        %endif
      %endforeach
      %break
    %case "Parameter"
      %foreach idx = block.NumParameters
	    %if block.Parameter[idx]._idx >= 0
          %assign param = ::CompiledModel.ModelParameters.Parameter[block.Parameter[idx]._idx]
          %assign typeName = SLibGetRecordDataTypeName(param, "")
          %assign fmiType = GetFMIType(typeName)
          %if fmiType != "" && !param.IsSfcnSizePrm && ISEMPTY(param.WorkspaceVarName) && (!ISFIELD(param, "IsPseudoWorkspaceVar") || param.IsPseudoWorkspaceVar == "no")
%<OutputParameterFMI(fmiVer, param, startIndex+numBlkVars, varOffset, hierarchy, isSf, 0)>
            %assign numBlkVars = numBlkVars + LibGetRecordWidth(param)
          %endif
        %endif
      %endforeach
      %break
    %case "BlockOutput"
      %with ::CompiledModel.BlockOutputs
        %foreach blockoutpid = NumGlobalBlockOutputs
          %assign blockoutp = GlobalBlockOutput[blockoutpid]
          %if (ISFIELD(blockoutp, "GrSrc") && blockoutp.GrSrc[1] != -1)
            %if (blockoutp.GrSrc[0]==subSysIdx) && (blockoutp.GrSrc[1]==blockIdx)
              %assign typeName = SLibGetRecordDataTypeName(blockoutp, "")
              %assign fmiType = GetFMIType(typeName)
              %if (fmiType != "") && (blockoutp.IsSynthesized != 1) && (ISFIELD(blockoutp, "VarGroupIdx"))
%<OutputBlockoutputFMI(fmiVer, blockoutp, startIndex+numBlkVars, varOffset, hierarchy, isSf)>
                %assign numBlkVars = numBlkVars + LibGetRecordWidth(blockoutp)
              %endif
            %endif
          %endif
        %endforeach
      %endwith     
      %break
    %case "DWork"
      %foreach idx = block.NumDWorks
	    %if block.DWork[idx]._idx >= 0
          %assign dwork = ::CompiledModel.DWorks.DWork[block.DWork[idx]._idx]
          %assign typeName = SLibGetRecordDataTypeName(dwork, "")
          %assign fmiType = GetFMIType(typeName)
          %if (fmiType != "") && (dwork.Name == "DSTATE" || dwork.UsedAs == "DSTATE")
%<OutputDWorkFMI(fmiVer, dwork, startIndex+numBlkVars, varOffset, hierarchy, idx, block.DWork[idx]._idx, isSf)>
            %assign numBlkVars = numBlkVars + LibGetRecordWidth(dwork)
          %endif
        %endif
      %endforeach
      %foreach idx = block.NumDiscStates
	    %if block.DiscState[idx]._idx >= 0
          %assign dwork = ::CompiledModel.DWorks.DWork[block.DiscState[idx]._idx]
          %assign typeName = SLibGetRecordDataTypeName(dwork, "")
          %assign fmiType = GetFMIType(typeName)
          %if (fmiType != "") && (dwork.Name == "DSTATE" || dwork.UsedAs == "DSTATE")
%<OutputDWorkFMI(fmiVer, dwork, startIndex+numBlkVars, varOffset, hierarchy, idx+block.NumDWorks, block.DiscState[idx]._idx, isSf)>
            %assign numBlkVars = numBlkVars + LibGetRecordWidth(dwork)
          %endif
        %endif
      %endforeach
      %break
    %default
  %endswitch
  %return numBlkVars
%endfunction

%function GenerateSubsystemFMI(fmiVer, fmiCategory, subSysIdx, startIndex, varOffset, hierarchy, blackbox) void
  %assign numVars = 0
  %assign subsystem = ::CompiledModel.BlockHierarchyMap.Subsystem[subSysIdx]
  %foreach bIdx = subsystem.NumBlocks
    %assign numBlockVars = GenerateBlockFMI(fmiVer, fmiCategory, subsystem.Block[bIdx], subSysIdx, bIdx, startIndex+numVars, varOffset, hierarchy, blackbox)
    %assign numVars = numVars + numBlockVars
  %endforeach
  %foreach ssIdx = subsystem.NumChildSubsystems
    %assign numSubsystemVars = GenerateSubsystemFMI(fmiVer, fmiCategory, subsystem.ChildSubsystems[ssIdx], startIndex+numVars, varOffset, hierarchy, blackbox)
    %assign numVars = numVars + numSubsystemVars
  %endforeach
  %return numVars
%endfunction

%function GenerateGlobalTunablePars(fmiVer, fmiCategory, varOffset, hierarchy) void
  %assign numParams = 0
  %with ::CompiledModel.ModelParameters
    %foreach paramid = NumParameters
      %assign param = Parameter[paramid]
      %assign typeName = SLibGetRecordDataTypeName(param, "")
      %assign fmiType = GetFMIType(typeName)
      %if fmiType != "" && !param.IsSfcnSizePrm && (param.StorageClass == "Auto_SFCN" && (!ISEMPTY(param.WorkspaceVarName) || (ISFIELD(param, "IsPseudoWorkspaceVar") && param.IsPseudoWorkspaceVar == "yes")))
%<OutputParameterFMI(fmiVer, param, numParams, varOffset, hierarchy, 0, 1)>
        %assign numParams = numParams + LibGetRecordWidth(param)
      %endif
    %endforeach
  %endwith
  %return numParams
%endfunction

