#  rtwsfcnfmi_unix.tmf
#
#  Template makefile for building RTW-generated S-functions
#  with FMI on UNIX-based systems.
#
#  Customized from rtwsfcn_unix.tmf in the Matlab distribution.
#

#
# 	This makefile attempts to conform to the guidelines specified in the
# 	IEEE Std 1003.2-1992 (POSIX) standard. It is designed to be used
#       with GNU Make which is located in matlabroot/rtw/bin.
#
# 	Note that this template is automatically customized by the build 
#       procedure to create "<model>.mk"
#
#       The following defines can be used to modify the behavior of the
#	build:
#
#         MEX_OPTS       - User specific mex options.
#	  OPT_OPTS       - Optimization options. Default is -O. To enable 
#                          debugging specify as OPT_OPTS=-g. 
#                          Because of optimization problems in IBM_RS, 
#                          default is no-optimization. 
#	  USER_SRCS      - Additional user sources, such as files needed by
#			   S-functions.
#	  USER_INCLUDES  - Additional include paths
#			   (i.e. USER_INCLUDES="-Iwhere-ever -Iwhere-ever2")
#
#       To enable debugging:
#         set DEBUG_BUILD = 1 below, which will trigger MEX_OPTS=-g and
#          LDFLAGS += -g (may vary with compiler version, see compiler doc) 
#
#       This template makefile is designed to be used with a system target
#       file that contains 'rtwgensettings.BuildDirSuffix' see accel.tlc

#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the build procedure (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.

MAKECMD         = |>MATLAB_BIN<|/|>ARCH<|/gmake
HOST            = UNIX
BUILD           = yes
SYS_TARGET_FILE = rtwsfcnfmi.tlc
COMPILER_TOOL_CHAIN = unix

#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# build procedure.
#
#  MODEL_NAME      - Name of the Simulink block diagram
#  MODEL_MODULES   - Any additional generated source modules
#  MAKEFILE_NAME   - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT     - Path to where MATLAB is installed.
#  S_FUNCTIONS     - List of S-functions.
#  S_FUNCTIONS_LIB - List of S-functions libraries to link.
#  SOLVER          - Solver source file name
#  NUMST           - Number of sample times
#  TID01EQ         - yes (1) or no (0): Are sampling rates of continuous task
#                    (tid=0) and 1st discrete task equal.
#  NCSTATES        - Number of continuous states
#  COMPUTER        - Computer type. See the MATLAB computer command.
#  MEXEXT          - extension that a mex file has. See the MATLAB mexext 
#                    command
#  BUILDARGS       - Options passed in at the command line.
#  USERMODULES     - passed along for later code generations of models that 
#                    contain this S-Function. (Used by generated S-Function block.)
#  CREATEMODEL     - 1 will cause a untitled model to be opened with the 
#                    generated S-function block inside it.
#  USEPARAMVALUES  - 1 will cause the generated S-function block to have values
#                    instead of variable names.

MODEL              = |>MODEL_NAME<|
MODULES            = |>MODEL_MODULES<|
MAKEFILE           = |>MAKEFILE_NAME<|
MATLAB_ROOT        = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT    = |>ALT_MATLAB_ROOT<|
MASTER_ANCHOR_DIR  = |>MASTER_ANCHOR_DIR<|
START_DIR          = |>START_DIR<|
S_FUNCTIONS        = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB    = |>S_FUNCTIONS_LIB<|
SOLVER             = |>SOLVER<|
NUMST              = |>NUMST<|
TID01EQ            = |>TID01EQ<|
NCSTATES           = |>NCSTATES<|
MEM_ALLOC          = |>MEM_ALLOC<|
COMPUTER           = |>COMPUTER<|
MEXEXT             = |>MEXEXT<|
BUILDARGS          = |>BUILDARGS<|
USERMODULES        = |>USERMODULES<|
CREATEMODEL        = |>CREATEMODEL<|
USEPARAMVALUES     = |>USEPARAMVALUES<|
PURIFY             = |>PURIFY<|
TARGET_LANG_EXT    = |>TARGET_LANG_EXT<|
OPTIMIZATION_FLAGS = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS = |>ADDITIONAL_LDFLAGS<|
FMI_VER         = |>FMI_VER<|
FMI_TYPE        = |>FMI_TYPE<|
FMI_LOAD_MEX    = |>FMI_LOAD_MEX<|
FMI_USER_SRCS   = |>FMI_USER_SRCS<|
FMI_OPT_OPTS    = |>FMI_OPT_OPTS<|

# To enable debugging:
# set DEBUG_BUILD = 1
DEBUG_BUILD             = 0

#-- In the case when directory name contains space ---
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif

#--------------------------- Tool Specifications -------------------------------
include $(MATLAB_ROOT)/rtw/c/tools/unixtools.mk

CC = $(MATLAB_ROOT)/bin/mex
CPP = $(MATLAB_ROOT)/bin/mex

#------------------------------ Include Path -----------------------------------
MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/rtw/c/src

# Additional file include paths
ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

INCLUDES = -I. -I.. $(MATLAB_INCLUDES) $(ADD_INCLUDES) $(USER_INCLUDES)

#-------------------------------- Mex Options  ---------------------------------
# General User Options
ifeq ($(DEBUG_BUILD),0)
MEX_OPTS =
else
#   Set OPTS=-g and any additional flags for debugging
MEX_OPTS = -g
LDFLAGS += -g
endif

OPT_OPTS  = $(DEFAULT_OPT_OPTS)

GCC_WARN_OPTS := 

ifneq ($(ADDITIONAL_LDFLAGS),)
MEX_LDFLAGS = LDFLAGS='$$LDFLAGS $(ADDITIONAL_LDFLAGS)'
else
MEX_LDFLAGS =
endif

# See rtw/c/tools/unixtools.mk for the definition of GCC_WARN_OPTS

ifeq ($(PURIFY),1)
  MEX_FLAGS = $(MEX_OPTS) -g COPTIMFLAGS="$(GCC_WARN_OPTS)" $(MEX_LDFLAGS)
else
  ifeq ($(MEX_OPTS),-g)
    MEX_FLAGS = -g COPTIMFLAGS="$(GCC_WARN_OPTS)" $(MEX_LDFLAGS)
  else
    ifeq ($(OPT_OPTS),-g)
     MEX_FLAGS = $(MEX_OPTS) -g COPTIMFLAGS="$(GCC_WARN_OPTS)" $(MEX_LDFLAGS)
    else
      ifneq ($(OPTIMIZATION_FLAGS),)
       MEX_FLAGS = $(MEX_OPTS) COPTIMFLAGS="$(OPTIMIZATION_FLAGS) -DNDEBUG $(GCC_WARN_OPTS)" $(MEX_LDFLAGS)
      else
       MEX_FLAGS = $(MEX_OPTS) COPTIMFLAGS="$(OPT_OPTS) -DNDEBUG $(GCC_WARN_OPTS)" $(MEX_LDFLAGS)
      endif
    endif
  endif
endif

#----------------------------- Source Files -----------------------------------
USER_SRCS =

USER_OBJS       = $(USER_SRCS:.c=.o)
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))

SRCS      = $(MODEL)_sf.$(TARGET_LANG_EXT) $(MODULES)
SRCS_OBJS = $(addsuffix .o, $(basename $(SRCS)))
OBJS      = $(SRCS_OBJS) $(USER_OBJS)
LINK_OBJS = $(SRCS_OBJS) $(LOCAL_USER_OBJS)

#-------------------------- Additional Libraries ------------------------------

LIBS =
|>START_PRECOMP_LIBRARIES<|
ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LIBS += |>EXPAND_LIBRARY_LOCATION<|/|>EXPAND_LIBRARY_NAME<|_rtwsfcn.a
else
LIBS += |>EXPAND_LIBRARY_NAME<|.a
endif
|>END_PRECOMP_LIBRARIES<| |>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.a |>END_EXPAND_LIBRARIES<|
LIBS += $(S_FUNCTIONS_LIB)

ifeq ($(PURIFY),1)
  LIBUT = -L$(MATLAB_ROOT)/bin/PURIFY/$(ARCH) -lut
else
  LIBUT = -L$(MATLAB_ROOT)/bin/$(ARCH) -lut
endif

LIBFIXPT = -lfixedpoint

PROGRAM = ../$(MODEL)_sf.$(MEXEXT)

#------------------------------ FMI Settings ----------------------------------

ifeq ($(FMI_VER),1.0)
 FMI_PREFIX = fmi1
else
 FMI_PREFIX = fmi2
endif

ifeq ($(FMI_TYPE),CoSimulation)
 FMI_MODULE       = $(FMI_PREFIX)Functions
 ifeq ($(SOLVER),)   #-- discrete (no continuous states)
  FMI_SOLVER_SRC = $(MATLAB_ROOT)/rtw/c/src/ode1.c
  FMI_SOLVER_OBJ = ode1.o
 else
  FMI_SOLVER_SRC = $(MATLAB_ROOT)/rtw/c/src/$(SOLVER)
  FMI_SOLVER_OBJ = $(SOLVER:.c=.o)
 endif
 ifeq ($(SOLVER),ode14x.c)
  FMI_SOLVER_OBJ += rt_backsubrr_dbl.o rt_forwardsubrr_dbl.o rt_lu_real.o
 endif
else
 FMI_MODULE       = $(FMI_PREFIX)ModelFunctions
 FMI_SOLVER_SRC = $(MATLAB_ROOT)/rtw/c/src/ode1.c
 FMI_SOLVER_OBJ = ode1.o
endif

FMI_SRC = $(SFCN_FMI_ROOT)/c/$(FMI_MODULE).c
FMI_OBJ = $(FMI_MODULE).o

FMI_MODULE_OBJS = $(MODULES:.c=.o)

ifeq ($(FMI_LOAD_MEX),1)
 FMI_SFCN_SRCS =
else
 FMI_SFCN_SRCS = $(S_FUNCTIONS) $(FMI_USER_SRCS)
endif

ifneq ($(FMI_SFCN_SRCS),)
 FMI_RT_OBJS = rt_matrx.o
endif

FMI_SFCN_OBJS_CPP = $(FMI_SFCN_SRCS:.cpp=.o)
FMI_SFCN_OBJS = $(FMI_SFCN_OBJS_CPP:.c=.o)

FMI_OBJS = $(FMI_SOLVER_OBJ) $(FMI_RT_OBJS) $(FMI_SFCN_OBJS) $(FMI_MODULE_OBJS) $(LOCAL_USER_OBJS) $(MODEL)_sf.o

# To invoke special rule for compilation of S-function sources
FMI_SFCN_DUMMIES_CPP = $(FMI_SFCN_SRCS:.cpp=.dum)
FMI_SFCN_DUMMIES = $(FMI_SFCN_DUMMIES_CPP:.c=.dum)

ifeq ($(MEXEXT),mexa64)
 FMI_ARCH_OPT = -m64
 FMI_DIR = linux64
else
 FMI_ARCH_OPT = -m32
 FMI_DIR = linux32
endif

FMI_CC = gcc
FMI_CPP = g++

FMI_CC_FLAGS = -c -fPIC $(FMI_OPT_OPTS) -DNDEBUG $(FMI_ARCH_OPT) -DUNIX

ifeq ($(FMI_LOAD_MEX),1)
 FMI_ROOT_SFCN_DEFINES  = -DMATLAB_MEX_FILE -DRT_MALLOC -DMEX_DOUBLE_HANDLE
else
 FMI_ROOT_SFCN_DEFINES  = -DFIPXT_SHARED_MODULE -Drt_matrx_h -DRT_MALLOC
endif
FMI_CHILD_SFCN_DEFINES = -DNRT -DRT_MALLOC
FMI_SOLVER_DEFINES     = -DNRT -DRT_MALLOC

FMI_ROOT_SFCN_INCLUDES = -I$(SFCN_FMI_ROOT)/c
FMI_SOLVER_INCLUDES = -I$(MATLAB_ROOT)/rtw/c/src/matrixmath

FMI_IMPL = $(SFCN_FMI_BIN)/$(FMI_PREFIX).o
FMI_RTP_CPP = $(SFCN_FMI_ROOT)/bin/rtPrintfNoOp/$(FMI_DIR)/rtPrintfNoOp_cpp.o

FMI_EXT = so
FMI_LD  = gcc
FMI_LD_CMD = -shared -fPIC -Wl,--allow-multiple-definition $(FMI_ARCH_OPT) $(FMI_OBJS) $(FMI_IMPL) $(FMI_RTP_CPP) $(LIBS) -lm
ifeq ($(FMI_LOAD_MEX),1)
 FMI_LD_CMD += -L$(MATLAB_ROOT)/bin/$(ARCH) -lmx -lmex -lmat
endif
FMI_DEL = rm -f *.tmp *.o

FMI_LD_OUT = -o $(MODEL)_sf.$(FMI_EXT)


#--------------------------------- Rules --------------------------------------

$(PROGRAM) : $(OBJS) $(LIBS) $(FMI_OBJ) $(FMI_SFCN_DUMMIES)
	@echo "### Linking ..."
	$(CC) $(MEX_FLAGS) LDFLAGS="$$LDFLAGS -Wl,--allow-multiple-definition" -MATLAB_ARCH=$(ARCH) -silent -outdir .. $(LINK_OBJS) $(LIBS) $(LIBUT) $(LIBFIXPT)
	@echo "### Created mex file: $(MODEL)_sf.$(MEXEXT)"
	@echo "###"
	@echo "### Creating FMU binary $(MODEL)_sf.$(FMI_EXT)"
	@rm -f $(MODEL)_sf.o
	@cp $(FMI_OBJ) $(MODEL)_sf.o
	$(FMI_LD) $(FMI_LD_CMD) $(FMI_LD_OUT)
	@echo "### Cleaning up temporary files and object files..."
	@$(FMI_DEL)
	@rm -rf ../$(MODEL)_sf.fmu
	@rm -rf binaries
	@mkdir FMUArchive
	@mkdir FMUArchive/binaries
	@mkdir FMUArchive/binaries/$(FMI_DIR)
	@mv $(MODEL)_sf.$(FMI_EXT) FMUArchive/binaries/$(FMI_DIR)
	@mv modelDescription.xml FMUArchive
	@mv resources FMUArchive

%.o : %.c
	$(CC) -c $(MEX_FLAGS) $(INCLUDES) "$<"

%.o : %.cpp
	$(CPP) -c $(MEX_FLAGS) $(INCLUDES) "$<"

%.o : ../%.c
	$(CC) -c $(MEX_FLAGS) $(INCLUDES) "$<"

%.o : ../%.cpp
	$(CPP) -c $(MEX_FLAGS) $(INCLUDES) "$<"

%.dum : ../%.c
	@echo "### Compiling S-function: $<"
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_CHILD_SFCN_DEFINES) $(INCLUDES) "$<"

%.dum : ../%.cpp
	@echo "### Compiling S-function: $<"
	$(FMI_CPP) $(FMI_CC_FLAGS) $(FMI_CHILD_SFCN_DEFINES) $(INCLUDES) "$<"

$(FMI_OBJ) : $(FMI_SRC)
	@echo "###"
	@echo "### Compiling FMI wrapper: $(FMI_SRC)"
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_ROOT_SFCN_DEFINES) $(FMI_ROOT_SFCN_INCLUDES) $(INCLUDES) $(FMI_SRC)
	@echo "### Compiling fixed-step solver: $(FMI_SOLVER_SRC)"
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_SOLVER_DEFINES) $(FMI_SOLVER_INCLUDES) $(INCLUDES) $(FMI_SOLVER_SRC)
    ifeq ($(FMI_TYPE),CoSimulation)
    ifeq ($(SOLVER),ode14x.c)
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_SOLVER_DEFINES) $(FMI_SOLVER_INCLUDES) $(INCLUDES) $(MATLAB_ROOT)/rtw/c/src/matrixmath/rt_backsubrr_dbl.c
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_SOLVER_DEFINES) $(FMI_SOLVER_INCLUDES) $(INCLUDES) $(MATLAB_ROOT)/rtw/c/src/matrixmath/rt_forwardsubrr_dbl.c
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_SOLVER_DEFINES) $(FMI_SOLVER_INCLUDES) $(INCLUDES) $(MATLAB_ROOT)/rtw/c/src/matrixmath/rt_lu_real.c
    endif
    endif
    ifneq ($(FMI_SFCN_SRCS),)
	$(FMI_CC) $(FMI_CC_FLAGS) $(FMI_CHILD_SFCN_DEFINES) $(INCLUDES) $(MATLAB_ROOT)/rtw/c/src/rt_matrx.c
    endif

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.c
	$(CC) -c $(MEX_FLAGS) $(INCLUDES) "$<"

|>END_EXPAND_RULES<|

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.cpp
	$(CPP) -c $(MEX_FLAGS) $(INCLUDES) "$<"

|>END_EXPAND_RULES<|

%.o : $(MATLAB_ROOT)/simulink/src/%.c
	$(CC) -c $(MEX_FLAGS) $(INCLUDES) "$<"

%.o : $(MATLAB_ROOT)/simulink/src/%.cpp
	$(CPP) -c $(MEX_FLAGS) $(INCLUDES) "$<"

#------------------------------- Libraries -------------------------------------

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Created $@"

|>END_EXPAND_LIBRARIES<|

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|    |>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Created $@"

|>END_PRECOMP_LIBRARIES<|

clean :
	@echo "### Deleting the objects and $(PROGRAM)"
	@\rm -f $(wildcard *.o) $(PROGRAM)

#----------------------------- Dependencies -------------------------------

$(OBJS) : $(MAKEFILE) rtw_proj.tmw
